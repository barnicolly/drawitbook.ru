#!groovy

properties([disableConcurrentBuilds()]) // отключить одновременные сборки

def sshCredId = 'ssh_manager'
def sshUser = 'root'
def sshServer = ''

def registry = 'dockerhub.ratnikovmikhail.ru'
def registryUrl = "https://${registry}"

def projectName = 'drawitbook_com'

def timeZone = 'Europe/Moscow'
def dockerImagePrefix = "${registry}/projects/${projectName}"
def TAG = ''
def PREVIOUS_TAG = ''

pipeline {
    agent {
        label 'master'
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
        timestamps()
    }
    stages {
        stage('Preparing') {
          steps {
              script {
                  TAG = sh (script: "git log -n 1 --pretty=format:'%H'", returnStdout: true)
              }
              script {
                  withCredentials([string(credentialsId: 'ssh_manager_server', variable: 'SSH_MANAGER_SERVER')]) {
                      sshServer = SSH_MANAGER_SERVER
                  }
              }
          }
        }
        stage('Install vendor') {
            parallel {
               stage('npm') {
                   steps {
                        script {
                            withCredentials([string(credentialsId: 'npm_token', variable: 'NPM_TOKEN')]) {
                                docker.withRegistry(registryUrl, 'registry') {
                                    def imageName = "${dockerImagePrefix}/npm:${TAG}"
                                    def buildArgs = "--build-arg NPM_TOKEN=${NPM_TOKEN} ."
                                    def customImage = docker.build(imageName, "-f docker/prod/npm/Dockerfile ${buildArgs}")
                                }
                            }
                        }
                   }
               }
                stage('composer') {
                    steps {
                        script {
                            withCredentials([string(credentialsId: 'composer_token', variable: 'COMPOSER_TOKEN')]) {
                                docker.withRegistry(registryUrl, 'registry') {
                                    def imageName = "${dockerImagePrefix}/vendor:${TAG}"
                                    def buildArgs = "--build-arg COMPOSER_TOKEN=${COMPOSER_TOKEN} ."
                                    def customImage = docker.build(imageName, "-f docker/prod/vendor/Dockerfile ${buildArgs}")
                                }
                            }
                        }
                   }
                }
           }
        }
        stage('Build artefacts') {
            parallel {
                stage('Static minimization') {
                    steps {
                        script {
                             docker.withRegistry(registryUrl, 'registry') {
                                def imageName = "${dockerImagePrefix}/static:${TAG}"
                                def buildArgs = "--build-arg NODE_ENV=production --build-arg TAG=${TAG} ."
                                def customImage = docker.build(imageName, "-f docker/prod/static/Dockerfile ${buildArgs}")
                            }
                        }
                    }
                }
            }
        }
        stage('Build services') {
            parallel {
               stage('web_server') {
                   steps {
                        script {
                            docker.withRegistry(registryUrl, 'registry') {
                                def imageName = "${dockerImagePrefix}/web_server"
                                def buildArgs = "--build-arg TIME_ZONE=${timeZone} --build-arg TAG=${TAG} ."
                                def customImage = docker.build(imageName, "-f docker/prod/nginx/Dockerfile ${buildArgs}")
                                customImage.push("${TAG}")
                                customImage.push("latest")
                            }
                        }
                   }
               }
                stage('php') {
                    steps {
                        script {
                            docker.withRegistry(registryUrl, 'registry') {
                                def imageName = "${dockerImagePrefix}/php"
                                def buildArgs = "--build-arg TAG=${TAG} ."
                                def customImage = docker.build(imageName, "-f docker/prod/php/Dockerfile ${buildArgs}")
                                customImage.push("${TAG}")
                                customImage.push("latest")
                            }
                        }
                   }
                }
           }
        }
          stage('Build scheduler') {
                  steps {
                      script {
                          docker.withRegistry(registryUrl, 'registry') {
                              def imageName = "${dockerImagePrefix}/scheduler"
                              def buildArgs = "--build-arg TAG=${TAG} ."
                              def customImage = docker.build(imageName, "-f docker/prod/scheduler/Dockerfile ${buildArgs}")
                              customImage.push("${TAG}")
                              customImage.push("latest")
                          }
                      }
                  }
          }
        stage("deploy") {
            steps {
                sshagent(credentials: [sshCredId]) {
                    script
                    {
                        withCredentials([usernamePassword(credentialsId: 'registry', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            def phpImageName = "${dockerImagePrefix}/php:${TAG}"
                            def webServerImageName = "${dockerImagePrefix}/web_server:${TAG}"
                            def schedulerImageName = "${dockerImagePrefix}/scheduler:${TAG}"
                            def sshLogin = "ssh -o StrictHostKeyChecking=no ${sshUser}@${sshServer}"
                            sh "ssh -o StrictHostKeyChecking=no ${sshUser}@${sshServer} docker login ${registry} -u ${USERNAME} -p ${PASSWORD}"
                            sh "ssh -o StrictHostKeyChecking=no ${sshUser}@${sshServer} docker service update --image ${phpImageName} ${projectName}_fpm --with-registry-auth --update-order start-first --update-parallelism 0 --update-delay 1s"
                            sh "ssh -o StrictHostKeyChecking=no ${sshUser}@${sshServer} docker service update --image ${webServerImageName} ${projectName}_webserver --with-registry-auth --update-order start-first --update-parallelism 0 --update-delay 1s"
                            sh "ssh -o StrictHostKeyChecking=no ${sshUser}@${sshServer} docker service update --image ${schedulerImageName} ${projectName}_scheduler --with-registry-auth --update-order start-first --update-parallelism 0 --update-delay 1s"
                        }
                    }
                }
            }
        }
        stage('cleanup preparing') {
            steps {
                script {
                    PREVIOUS_TAG = sh (script: "docker images ${dockerImagePrefix}/npm --format=\"{{ .Tag }}\" | grep -i -v -E 'latest|${TAG}' | head -n 1", returnStdout: true)
                }
            }
        }
        stage('cleanup') {
            when { expression { PREVIOUS_TAG } }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "docker rmi ${dockerImagePrefix}/npm:${PREVIOUS_TAG}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "docker rmi ${dockerImagePrefix}/vendor:${PREVIOUS_TAG}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "docker rmi ${dockerImagePrefix}/static:${PREVIOUS_TAG}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "docker rmi ${dockerImagePrefix}/scheduler:${PREVIOUS_TAG}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "docker rmi ${dockerImagePrefix}/web_server:${PREVIOUS_TAG}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "docker rmi ${dockerImagePrefix}/php:${PREVIOUS_TAG}"
                }
                catchError(buildResult: 'SUCCESS', stageResult: 'SUCCESS') {
                    sh "docker rmi \$(docker images -f dangling=true -q)"
                }
            }
        }
    }
}